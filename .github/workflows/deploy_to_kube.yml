name: Heroku (staging)

on:
  push:
    branches: [ actions-kube-poc ]

jobs:
  build:
    name: Building and Pushing Image
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cargo Cache
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}
            ${{ runner.os }}-cargo

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Geyser consumer to Amazon ECR (dev)
        id: build-geyser-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}

        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          image_tag="$ECR_REGISTRY/$ECR_REPOSITORY:geyserconsumer-${GITHUB_REF##*/}-$git_hash"
          docker build -t $image_tag --target geyser-consumer .
          echo "Pushing image to ECR..."
          docker push $image_tag
          echo "::set-output name=image::$image_tag"

      - name: Build, tag, and push HTTP consumer to Amazon ECR (dev)
        id: build-http-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}

        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          image_tag="$ECR_REGISTRY/$ECR_REPOSITORY:httpconsumer-${GITHUB_REF##*/}-$git_hash"
          docker build -t $image_tag --target http-consumer .
          echo "Pushing image to ECR..."
          docker push $image_tag
          echo "::set-output name=image::$image_tag"

      - name: Build, tag, and push GraphQL to Amazon ECR (dev)
        id: build-graphql-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}

        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          image_tag="$ECR_REGISTRY/$ECR_REPOSITORY:graphql-${GITHUB_REF##*/}-$git_hash"
          docker build -t $image_tag --target graphql .
          echo "Pushing image to ECR..."
          docker push $image_tag
          echo "::set-output name=image::$image_tag"

      - name: Update deployments image versions (dev)
        if: github.ref == 'refs/heads/dev'
        run: |
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            deployment_file="./k8s/dev/app/indexer-deploy.yaml"
            app=geyserconsumer
            version=$(cat $deployment_file | grep -i image | grep -i $app | awk {'print $2'} | head -n1 | cut -d: -f2)
            sed -i "s/$version/$app-${GITHUB_REF##*/}-$git_hash/" $deployment_file
            app=httpconsumer
            version=$(cat $deployment_file | grep -i image | grep -i $app | awk {'print $2'} | head -n1 | cut -d: -f2)
            sed -i "s/$version/$app-${GITHUB_REF##*/}-$git_hash/" $deployment_file
            app=graphql
            version=$(cat $deployment_file | grep -i image | grep -i $app | awk {'print $2'} | head -n1 | cut -d: -f2)
            sed -i "s/$version/$app-${GITHUB_REF##*/}-$git_hash/" $deployment_file

      - name: Commit and push changes
        uses: devops-infra/action-commit-push@master
        with:
          github_token: ${{ secrets.ACTIONS_TOKEN}}
          commit_message: Updated deployment image version
